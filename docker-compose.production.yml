version: '3'
#prod
services:
  nginx:
    image: nginx:1.13
    ports:
      - "8080:8080"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/uwsgi_params:/etc/nginx/uwsgi_params
      - ./static:/static
    expose:
      - "8080"
    depends_on:
      - python

  db:
    image: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      PGPASSWORD: password
      POSTGRES_DB: testapp_tenant
      DATABASE_HOST: db
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - mtt_db:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  # pgweb:
  #   image: sosedoff/pgweb    
  #   environment:
  #     DATABASE_URL: postgres://user:password@db/testapp_tenant?sslmode=disable
  #   expose:
  #     - "8888"
  #   links:
  #     - db:db
  #   ports:
  #     - '8888:8081'

  python:
    build: ./python
    command: uwsgi --socket :8001 --module testapp.wsgi --py-autoreload 1 --logto /tmp/mylog.log
    volumes: 
      - ./src:/code 
      - ./static:/static
    expose:
      - "8001"
    depends_on:
      - db
    env_file:
      - config/django/production_env

  https-portal:
    image: steveltn/https-portal:1
    ports:
      - '80:80'
      - '443:443'
    links:
      - nginx:nginx
    restart: always
    environment:
      DOMAINS: 'slackattend.work -> http://nginx:8080'
      STAGE: 'production'
    volumes:
      - ./Droot/org-chimata-ssl-certs:/var/lib/https-portal

  # redis:
  #   image: "redis:alpine"
  # celery:
  #   build: ./python
  #   command: celery -A testapp worker -l info
  #   volumes:
  #       - ./src:/code
  #   depends_on:
  #       - python
  #       - db
  #       - redis
  #   env_file:
  #     - config/django/production_env

  # celery-beat:
  #   build: ./python
  #   command: celery -A testapp beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler --pidfile=
  #   volumes:
  #       - ./src:/code
  #   depends_on:
  #       - python
  #       - db
  #       - redis
  #   env_file:
  #     - config/django/production_env
volumes:
  mtt_db:
